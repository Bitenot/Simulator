# -*- coding: utf-8 -*-
import sqlite3
import telebot
import random
import time
from functools import wraps
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import sentry_sdk

sentry_sdk.init(
    dsn="https://179dc616054924dab0480879f689dd7b@o4509259448320000.ingest.de.sentry.io/4509259455004752",
    # Add data like request headers and IP for users,
    # see https://docs.sentry.io/platforms/python/data-management/data-collected/ for more info
    send_default_pii=True,
)

def get_resource(section: str, line_index: int = None, path: str = "resources.txt") -> str | list[str]:
    section = section.strip().upper()
    start_marker = f"==== {section} ===="
    with open(path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    inside_section = False
    section_lines = []

    for line in lines:
        line = line.strip()
        if not line:
            continue
        if line.startswith("====") and section in line:
            inside_section = True
            continue
        elif line.startswith("====") and inside_section:
            break
        elif inside_section:
            section_lines.append(line)

    if not section_lines:
        raise ValueError(f"–†–∞–∑–¥–µ–ª '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –≤ {path}")

    if line_index is not None:
        if line_index >= len(section_lines):
            raise IndexError(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section}' –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º {line_index}")
        return section_lines[line_index]

ADMIN_ID = 1766101476
TOKEN = get_resource("TOKENS", 0)
DB_PATH = get_resource("PATHS", 0)
ADMINS_DB_PATH = get_resource("PATHS", 1)
BANNED_USERS_DB_PATH= get_resource("PATHS", 2)

bot = telebot.TeleBot(TOKEN)

def create_table(group_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS '{group_id}' (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            points INTEGER DEFAULT 0,
            last_play INTEGER DEFAULT 0,
            character_level INTEGER DEFAULT 1,
            farm_level INTEGER DEFAULT 1,
            vampirism INTEGER DEFAULT 0,
            clprice INTEGER DEFAULT 60,
            farmprice INTEGER DEFAULT 85,
            vamprice INTEGER DEFAULT 170,
            chronos BOOLEAN DEFAULT 0,
            ares BOOLEAN DEFAULT 0,
            fortuna INTEGER DEFAULT 0,
            fortuna_price INTEGER DEFAULT 1500
        )
    """)

    columns = {
        "character_level": "INTEGER DEFAULT 1",
        "farm_level": "INTEGER DEFAULT 1",
        "vampirism": "INTEGER DEFAULT 0",
        "clprice": "INTEGER DEFAULT 60",
        "farmprice": "INTEGER DEFAULT 85",
        "vamprice": "INTEGER DEFAULT 170",
        "chronos": "BOOLEAN DEFAULT 0",
        "ares": "BOOLEAN DEFAULT 0",
        "fortuna": "INTEGER DEFAULT 0" ,
        "fortuna_price": "INTEGER DEFAULT 1500"
    }
    for column, column_type in columns.items():
        cursor.execute(f"PRAGMA table_info('{group_id}')")
        existing_columns = [info[1] for info in cursor.fetchall()]
        if column not in existing_columns:
            cursor.execute(f"ALTER TABLE '{group_id}' ADD COLUMN {column} {column_type}")
    conn.commit()
    conn.close()
    
user_locks = {}

def safe_command(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        global conn
        user_id = message.from_user.id
        if user_locks.get(user_id):
            bot.reply_to(message, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å. –ù–µ —Å–ø–∞–º—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return

        user_locks[user_id] = True

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–Ω
            conn = sqlite3.connect(BANNED_USERS_DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM banned_users WHERE user_id = ?", (user_id,))
            if cursor.fetchone():
                bot.reply_to(message, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –ø–µ—Ä–º–∞—á–µ–º –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å.\n–û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ –∑–∞–±–∞–Ω–µ–Ω—ã –æ—à–∏–±–æ—á–Ω–æ: @Thermobyte")
                return

            return func(message, *args, **kwargs)

        except Exception as e:
            bot.reply_to(message, f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            raise  # –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å

        finally:
            conn.close()
            user_locks.pop(user_id, None)

    return wrapper

def safe_callback(func):
    @wraps(func)
    def wrapper(call, *args, **kwargs):
        user_id = call.from_user.id
        if user_locks.get(user_id):
            bot.answer_callback_query(call.id, "‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø—Ä–µ–¥—ã–¥—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        user_locks[user_id] = True

        try:
            conn = sqlite3.connect(BANNED_USERS_DB_PATH)
            cursor = conn.cursor()
            cursor.execute("SELECT 1 FROM banned_users WHERE user_id = ?", (user_id,))
            if cursor.fetchone():
                bot.answer_callback_query(call.id, "üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return

            return func(call, *args, **kwargs)

        except Exception as e:
            bot.answer_callback_query(call.id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", show_alert=True)
            raise

        finally:
            conn.close()
            user_locks.pop(user_id, None)

    return wrapper

def get_time_word(value: int, word_type: str) -> str:
    forms = {
        '—Å–µ–∫—É–Ω–¥–∞': ('—Å–µ–∫—É–Ω–¥—É ', '—Å–µ–∫—É–Ω–¥—ã ', '—Å–µ–∫—É–Ω–¥ '),
        '–º–∏–Ω—É—Ç–∞': ('–º–∏–Ω—É—Ç—É ', '–º–∏–Ω—É—Ç—ã ', '–º–∏–Ω—É—Ç '),
        '—á–∞—Å': ('—á–∞—Å ', '—á–∞—Å–∞ ', '—á–∞—Å–æ–≤ '),
    }

    if word_type not in forms:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π: '—Å–µ–∫—É–Ω–¥–∞', '–º–∏–Ω—É—Ç–∞', '—á–∞—Å'.")

    n = abs(value)
    last_two = n % 100
    last_digit = n % 10

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
    if 11 <= last_two <= 14:
        form = forms[word_type][2]
    elif last_digit == 1:
        form = forms[word_type][0]
    elif 2 <= last_digit <= 4:
        form = forms[word_type][1]
    else:
        form = forms[word_type][2]

    return f"{value} {form}"

def check_achievement(points, character_level, vampirism, fortuna, farm_level):
    achievements = []

    # –û—á–∫–∏ (points)
    if points >= 10_000_000_000:
        achievements.append("‚≠êÔ∏è –í–µ–ª–∏—á–∞–π—à–∏–π")
    elif points >= 1_000_000_000:
        achievements.append("üèÜ –ú—É–ª—å—Ç–∏–º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä")
    elif points >= 100_000_000:
        achievements.append("üåê –ú–∏–ª–ª–∏–∞—Ä–¥–µ—Ä")
    elif points >= 10_000_000:
        achievements.append("üßê –ú—É–ª—å—Ç–∏–º–∏–ª–ª–∏–æ–Ω–µ—Ä")
    elif points >= 1_000_000:
        achievements.append("üï∂ –ú–∏–ª–ª–∏–æ–Ω–µ—Ä")
    elif points >= 100_000:
        achievements.append("üëë –ö–æ—Ä–æ–ª—å")
    elif points >= 50_000:
        achievements.append("üíç –ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç")
    elif points >= 10_000:
        achievements.append("üíµ –ú–∞–≥–Ω–∞—Ç")
    elif points >= 1_000:
        achievements.append("üíµ –ë–æ–≥–∞—Ç—ã–π")

    # –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if character_level >= 6:
        achievements.append("üßë‚Äçüíª CEO")

    # –í–∞–º–ø–∏—Ä–∏–∑–º
    if vampirism >= 6:
        achievements.append("üßõüèª‚Äç‚ôÄÔ∏è –î—Ä–∞–∫—É–ª–∞")

    # –£—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã
    if 1 <= farm_level <= 5:
        achievements.append("üìâ –ù–∞—á–∏–Ω–∞—é—â–∏–π")
    elif 5 < farm_level <= 10:
        achievements.append("üìà –£—á–µ–Ω–∏–∫")
    elif 10 < farm_level <= 15:
        achievements.append("üí≥ –°—Ç–∞—Ä—Ç–∞–ø–µ—Ä")
    elif 15 < farm_level <= 20:
        achievements.append("üìä –ë–∏–∑–Ω–µ—Å–º–µ–Ω")
    elif 20 < farm_level <= 30:
        achievements.append("üíé –ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å")
    elif 30 < farm_level <= 50:
        achievements.append("üí≥ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç")
    elif 50 < farm_level <= 70:
        achievements.append("üåê –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –¥–µ–ª–µ—Ü")
    elif 70 < farm_level <= 100:
        achievements.append("üîà –í 10-–∫–µ New York Times")
    elif farm_level > 100:
        achievements.append("üòà –ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä —Ä—ã–Ω–∫–∞")

    # –£–¥–∞—á–∞ (fortuna)
    if fortuna == 1:
        achievements.append("üçÄ –í–µ–∑—É–Ω—á–∏–∫")
    elif fortuna == 2:
        achievements.append("üé∞ –ò–∑–±—Ä–∞–Ω–Ω–∏–∫ –§–æ—Ä—Ç—É–Ω—ã")
    elif fortuna >= 3:
        achievements.append("üçÄ‚ù§Ô∏è –õ—é–±–æ–≤–Ω–∏–∫ –§–æ—Ä—Ç—É–Ω—ã")

    # –í–µ—Ä–Ω—ë–º —Å—Ç—Ä–æ–∫—É, –∫–∞–∫ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    return ", ".join(achievements) if achievements else "–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
    
def calculate_farm_price(farm_level, character_level):
    if 1 <= farm_level < 3:
        base_price = 100
    elif 3 <= farm_level < 5:
        base_price = 170
    elif 5 <= farm_level < 7:
        base_price = 230
    elif 7 <= farm_level < 10:
        base_price = 270
    elif 10 <= farm_level < 15:
        base_price = 350
    elif 15 <= farm_level < 30:
        base_price = 420
    elif 30 <= farm_level < 50:
        base_price = 670
    elif 50 <= farm_level < 70:
        base_price = 1000
    elif 70 <= farm_level <= 100:
        base_price = 1500
    else:
        base_price = 2500

    level_bonus = 5 * (farm_level - 1)
    boost_map = {
        2: 0.075,
        3: 0.113,
        4: 0.137,
        5: 0.16
    }
    character_boost = boost_map.get(character_level, 0)
    return round((base_price + level_bonus) * (1 + character_boost))

def get_rankings():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute("SELECT user_id, SUM(points) FROM (" +
                   " UNION ALL ".join(
                       [f"SELECT user_id, points FROM '{table[0]}'"
                        for table in cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")]
                   ) +
                   ") GROUP BY user_id ORDER BY SUM(points) DESC"
                   )
    global_ranks = {row[0]: idx + 1 for idx, row in enumerate(cursor.fetchall())}

    conn.close()
    return global_ranks

@bot.message_handler(commands=['message'])
@safe_command
def send_custom_message(message):
    try:
        args = message.text.split(' ', 2)
        if len(args) < 3:
            bot.reply_to(message, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π:\n/message <chat_id> <—Ç–µ–∫—Å—Ç –∏–ª–∏ photo:–ø—É—Ç—å>")
            return

        chat_id = args[1]
        content = args[2]

        if content.startswith("photo:"):
            photo_path = content[6:].strip()
            with open(photo_path, 'rb') as photo:
                bot.send_photo(chat_id, photo, caption=f"üì∑ –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞")
                bot.reply_to(message, f"‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        else:
            bot.send_message(chat_id, content)
            bot.reply_to(message, f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

def get_user_message(user_id: int) -> str | None:
    user_messages = {
        1766101476: "–î–æ–±—Ä–æ–≥–æ –≤–∞–º –¥–Ω—è, –ì–æ—Å–ø–æ–¥–∏–Ω.",
        1866831769: "–ü—Ä–∏–≤–µ—Ç, –ï–±–∞–ª–¥—É–π —Ö—É–µ–≤ –±–ª—è—Ç—å –∫—Ä—á –∏–¥–∏ –Ω–∞—Ö—É–π –Ω—É –ø—Ä–∏–≤–µ—Ç –∫—Ä—á –µ–ø—Ç–∞ –≥–µ–Ω–µ—Ä–∞–ª –®–≤–∞—Ä—Ü –º–µ–≥–∞ –Ω–∞–∫—Ä–∞—É–∑–µ–Ω –±–∏–≥ –≥–ª–∞—Å—Ç–µ—Ä –∏–±–± —Ö—É–µ–≤–Ω–∞–º–±–∞—Å –±–∞—Å–±–∞—Å –Ω–µ–∫—É–∫–∞—à–∫–∞.",
        1831570922: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ü–∞–ª—è —Ö—É–π –≤ –∞–Ω–∞–ª–µ .",
        1384347872: "–ü—Ä–∏–≤–µ—Ç, –ö–∞–º–∞.",
        1078150755: "–ó–¥–∞—Ä–æ–≤–∞, –î–∞–Ω—è",
        1781529906: "–ö—É–∫—É, –î—è–∫",
        6113547946: "–î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å, –•–ª–∏–≤–Ω—é–∫",
        5375127224: "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ù–∞—Å—Ç—è",
        1883638589: "–°–ª–æ–∂–Ω–µ–π –≤—Å–µ–≥–æ –±—ã—Ç—å –≤—Ä–∞—Ç–∞—Ä—ë–º... –ë—É—â–∞–Ω",
        1963483010: "–•—É–ª–∏ —Ç—ã —Ç—É—Ç –∑–∞–±—ã–ª, –ß—É—Ä–∞?",
        1178628743: "–ù—É —Ç–∏–ø–æ –ø—Ä–∏–≤–µ—Ç, –ï–≤–∞",
        1280324225: "–û –º–∞–π –≥–∞–¥ –∫—Ç–æ –∑–∞—Å—Ç–∞–≤–∏–ª —Ç–µ–±—è —Å—é–¥–∞ –∑–∞–π—Ç–∏, Ver–∞–Ω—ñ–∫–∞",
        1612850413: "–î–∞–∂–µ —Ç—ã —Å—é–¥–∞ –∑–∞—à–µ–ª, –õ—é–±—á–∏–∫. –Ø –≤ –∞—Ö—É–µ",
        1423167585: "–ù–µ—Ç, —Å–µ—Ä—å—ë–∑–Ω–æ! –ö—Ç–æ –∑–∞—Å—Ç–∞–≤–∏–ª –≤–∞—Å —Å—é–¥–∞ –∑–∞—Ö–æ–¥–∏—Ç—å?",
        5259346309: "–ù–∏ –∑–∞ —á—Ç–æ –±—ã –Ω–µ –ø–æ–¥—É–º–∞–ª —á—Ç–æ —Ç—ã —Å—é–¥–∞ –∑–∞–π–¥–µ—à—å, –®—É—Å—Ç",
        2022289714: "–ö–ê–ö–û–ì–û –•–£–Ø? –ö–ê–¢–Ø??? –ß–¢–û –¢–´ –ó–î–ï–°–¨ –ú–ê–¢–¨ –ï–ì–û –î–ï–õ–ê–ï–®–¨???",
        1579674787: "–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π –≤ —ç—Ç–æ –∏–≥—Ä–∞—Ç—å",
        1347702394: "–ê—Ä–∏–Ω–∞, —Ç—ã –∫–∞–∫ —Å—é–¥–∞ –ø–æ–ø–∞–ª–∞?",
        6837339007: "–®–∫–æ–ª—å–Ω—ã–π, –ø–∏–∑–¥—É–π –Ω–∞ —Ñ–µ—Ä–º—É —Ä–∞–±–æ—Ç–∞—Ç—å!"
    }

    return user_messages.get(user_id)

@bot.message_handler(commands=['start'])
@safe_command
def message_start(message):
    user_id = message.from_user.id
    msg = get_user_message(user_id)
    if msg:
        bot.reply_to(message, msg)

@bot.message_handler(commands=['sponsors'])
@safe_command
def sponsors_list(message):
    bot.reply_to(message, f"‚≠êÔ∏è –ù–∞—à–∏ —Å–ø–æ–Ω—Å–æ—Ä—ã:\n\nüèÖ@GoshaRubchinskiyyyyy - 3‚Ç¨(120–≥—Ä–Ω)üí∂\nü•à@Dq_Dq_Dq - 11–≥—Ä–Ω\nü•â@W_m_m_v_m_v - 11–≥—Ä–Ω")

@bot.message_handler(commands=['admins'])
def admin_list(message):
    bot.reply_to(message, "üõ°Ô∏è –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\nüëë @Thermobyte - Owner\n‚öúÔ∏è @lllapas - Heiress\nü§ñ @AC_EvelineBot - Admin-bot")

@bot.message_handler(commands=['play'])
@safe_command
def play_game(message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    group_id = message.chat.id
    create_table(group_id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute(
        f"SELECT points, last_play, character_level, farm_level, vampirism, chronos, ares, fortuna FROM '{group_id}' WHERE user_id = ?",
        (user_id,))
    row = cursor.fetchone()

    now = int(time.time())
    if row:
        points, last_play, character_level, farm_level, vampirism, chronos, ares, fortuna = row
        cooldown_time = 13680 if chronos else 19800
        if now - last_play < cooldown_time:
            remaining_time = cooldown_time - (now - last_play)
            hours, remainder = divmod(remaining_time, 3600)
            minutes, seconds = divmod(remainder, 60)
            bot.reply_to(message,
                         f"–ù–µ –∑–∞–ø—Ä—è–≥–∞–π—Ç–µ —Å–≤–æ–∏—Ö —Ä–∞–±–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ {get_time_word(hours, '—á–∞—Å') if hours > 0 else ''}{get_time_word(minutes, '–º–∏–Ω—É—Ç–∞') if minutes > 0 else ''}{get_time_word(seconds, '—Å–µ–∫—É–Ω–¥–∞')}. –£ –Ω–∞—Å 21 –≤–µ–∫!")
            return
    else:
        points, last_play, character_level, farm_level, vampirism, chronos, ares, fortuna = 0, 0, 1, 1, 0, 0, 0, 0
        cursor.execute(
            f"INSERT INTO '{group_id}' (user_id, username, points, last_play, character_level, farm_level, vampirism, chronos, ares, fortuna) VALUES (?, ?, 0, 0, 1, 1, 0, 0, 0, 0)",
            (user_id, username))



    jackpot_chance = 0.085 if fortuna <= 0 else 0.05+(0.04*fortuna)
    max_points = (10 + (farm_level - 1) * 5) * 2
    jackpot_boots = True if farm_level < 6 else False
    jackpot = max_points * 2 * 1.7 * (1.15 if jackpot_boots else 1)

    if ares:
        if random.random() <= jackpot_chance:
            if fortuna >= 3 and random.random < 0.35:
                delta = jackpot*2
            elif fortuna >= 2:
                delta = jackpot * 1.2
            else:
                delta = jackpot
                bot.reply_to(message, f"üéâ –î–∂–µ–∫–ø–æ—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {int(delta)} –æ—á–∫–æ–≤! üéâ")
        else:
            delta = random.randint(1, 10 + (farm_level - 1) * 5)
    else:
        if random.random() <= jackpot_chance:
            if fortuna >= 3 and random.random < 0.5:
                delta = max_points * 2 * 1.7 * (1.15 if jackpot_boots else 1)
                delta = delta*2
            else:
                delta = max_points * 2 * 1.7 * (1.15 if jackpot_boots else 1)
            bot.reply_to(message, f"üéâ –î–∂–µ–∫–ø–æ—Ç! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {int(delta)} –æ—á–∫–æ–≤! üéâ")
        elif random.random() < 0.55:
            delta = random.randint(1, 10 + (farm_level - 1) * 5)
        else:
            delta = -random.randint(1, 10 + (farm_level - 1) * 5)

    if (character_level > 1 and random.random() < 0.1 + 0.15 * (character_level - 1 + (fortuna*0.05))) or (character_level >= 6):
        delta += random.randint(1, 10 + (farm_level - 1) * 5)
        
    if vampirism > 0 and random.random() <= (0.25+(vampirism*0.03)):
        cursor.execute(f"SELECT user_id, username, farm_level, points, fortuna FROM '{group_id}' WHERE user_id != ?", (user_id,))
        other_users = cursor.fetchall()
        if other_users:
            victim_id, victim_username, victim_farm_level, victim_points, victim_fortuna = random.choice(other_users)

            if victim_points <= 0:
                # –ñ–µ—Ä—Ç–≤–∞ –±–µ–∑ –æ—á–∫–æ–≤
                bot.reply_to(message, f"@{victim_username} —Å–ª–∏—à–∫–æ–º –±–æ–º–∂–∞—Ä–∞, —É –Ω–µ–≥–æ –Ω–µ—Ç —à–∫–æ–ª—å–Ω—ã—Ö üòû")
            else:
                is_crit = random.random() < (0.20+(vampirism*0.01))   
                if is_crit:
                    base_steal = 10 + (vampirism * 3)
                    max_possible_steal = min(victim_points, victim_farm_level * vampirism + base_steal)
                    stolen_points = random.randint(1, base_steal)
                    stolen_points += round(victim_points * (0.10+(0.0125*vampirism)))  # 10% –ø—Ä–∏ –∫—Ä–∏—Ç–µ
                else:
                    base_steal = 7 + (vampirism * 3)
                    max_possible_steal = min(victim_points, victim_farm_level * vampirism + base_steal)
                    percentage_steal = victim_points * (0.05+(0.0125*vampirism))
                    stolen_points = random.randint(1, base_steal)
                    stolen_points += round(percentage_steal)

                # –ú–∏–Ω—É—Å—É–µ–º –∂–µ—Ä—Ç–≤—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∏–≥—Ä–æ–∫—É
                if victim_fortuna >= 1 and random.random() <= 30+(victim_fortuna*0.065):
                    if vampirism >= 6 and random.random() <= 0.5:
                        cursor.execute(f"UPDATE '{group_id}' SET points = points - ? WHERE user_id = ?", (stolen_points, victim_id))
                        cursor.execute(f"UPDATE '{group_id}' SET points = points + ? WHERE user_id = ?", (stolen_points, user_id))
                        if stolen_points > 0:
                            crit_text = " (–ö–†–ò–¢! üí•)" if is_crit else ""
                            bot.reply_to(message, f"{crit_text}\n\n–í—ã —Å–ø–∏–∑–¥–∏–ª–∏ {stolen_points} –®–∫–æ–ª—å–Ω—ã—Ö —É @{victim_username}")
                        else:
                            bot.reply_to(message, f"@{victim_username} –æ–∫–∞–∑–∞–ª—Å—è –±–æ–º–∂–∞—Ä–æ–π ‚Äî –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏.")
                    else:
                        stolen_points = stolen_points*0.5
                        cursor.execute(f"UPDATE '{group_id}' SET points = points - ? WHERE user_id = ?", (stolen_points, user_id))
                        cursor.execute(f"UPDATE '{group_id}' SET points = points + ? WHERE user_id = ?", (stolen_points, victim_id))
                        if stolen_points > 0:
                            crit_text = " (–ö–†–ò–¢! üí•)" if is_crit else ""
                            bot.reply_to(message, f"{crit_text}\n\n–§–æ—Ä—Ç—É–Ω–∞ –±–ª–∞–≥–æ—Å–ª–∞–≤–∏–ª–∞ {victim_username}!\n–£ –≤–∞—Å –æ—Ç–æ–±—Ä–∞–ª–∏ {stolen_points} –®–∫–æ–ª—å–Ω—ã—Ö.")
                        else:
                            bot.reply_to(message, f"@{victim_username} –æ–∫–∞–∑–∞–ª—Å—è –±–æ–º–∂–∞—Ä–æ–π ‚Äî –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏.")
                else:
                    cursor.execute(f"UPDATE '{group_id}' SET points = points - ? WHERE user_id = ?", (stolen_points, victim_id))
                    cursor.execute(f"UPDATE '{group_id}' SET points = points + ? WHERE user_id = ?", (stolen_points, user_id))
                    if stolen_points > 0:
                        crit_text = " (–ö–†–ò–¢! üí•)" if is_crit else ""
                        bot.reply_to(message, f"{crit_text}\n\n–í—ã —Å–ø–∏–∑–¥–∏–ª–∏ {stolen_points} –®–∫–æ–ª—å–Ω—ã—Ö —É @{victim_username}")
                    else:
                         bot.reply_to(message, f"@{victim_username} –æ–∫–∞–∑–∞–ª—Å—è –±–æ–º–∂–∞—Ä–æ–π ‚Äî –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏.")

    points += delta

    cursor.execute(f"UPDATE '{group_id}' SET points = ?, last_play = ? WHERE user_id = ?", (points, now, user_id))
    conn.commit()

    cursor.execute(f"SELECT user_id, points FROM '{group_id}' ORDER BY points DESC")
    local_ranks = {row[0]: idx + 1 for idx, row in enumerate(cursor.fetchall())}
    global_ranks = get_rankings()

    local_place = local_ranks.get(user_id, "N/A")
    global_place = global_ranks.get(user_id, "N/A")

    def check_delta(points):
        if points > 0:
            text = "–ø–æ—è–≤–∏–ª–æ—Å—å"
        else:
            text = "—É–º–µ—Ä–ª–æ"
        return text

    bot.reply_to(message, f"üíµ @{username} –Ω–∞ –≤–∞—à–µ–π —Ñ–µ—Ä–º–µ {check_delta(delta)} {abs(delta)} –®–∫–æ–ª—å–Ω—ã—Ö.\n"
                          f"üë®üèø‚Äçü¶≤ –¢–µ–ø–µ—Ä—å –Ω–∞ —Ñ–µ—Ä–º–µ {points} –®–∫–æ–ª—å–Ω—ã—Ö.\n"
                          f"üèÜ –í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ {local_place} –º–µ—Å—Ç–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ç–æ–ø–µ.")

    conn.close()

@bot.message_handler(commands=['statistic'])
@safe_command
def show_stats(message):
    group_id = message.chat.id
    user_id = message.from_user.id
    create_table(group_id)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute(
        f"SELECT username, points, character_level, farm_level, vampirism, chronos, ares, fortuna FROM '{group_id}' WHERE user_id = ?",
        (user_id,))
    stats = cursor.fetchone()
    conn.close()

    if not stats:
        bot.reply_to(message, "üò∞ –í—ã –µ—â—ë –Ω–µ –∏–≥—Ä–∞–ª–∏!")
        return

    username, points, character_level, farm_level, vampirism, chronos, ares, fortuna = stats
    achievement_text = check_achievement(points, character_level, vampirism, fortuna, farm_level)
    

    response = f"üìú –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"\
               f"üë®üèø‚Äçü¶≤ @{username}, —É –≤–∞—Å {points} –®–∫–æ–ª—å–Ω—ã—Ö.\n" \
               f"üßëüèª‚Äçüåæ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_level}\n" \
               f"üè° –£—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã: {farm_level}\n" \
               f"üßõüèª‚Äç‚ôÄÔ∏è –í–∞–º–ø–∏—Ä–∏–∑–º: {vampirism}\n" \
               f"‚ûñ –ú–∏–Ω—É—Å–æ—Ñ–æ–±–∏—è: {'–ï—Å—Ç—å' if ares else '–ù–µ—Ç—É'}\n" \
               f"‚åõÔ∏è –ß–∞—Å—ã –ö—Ä–æ–Ω–æ—Å–∞: {'–ï—Å—Ç—å' if chronos else '–ù–µ—Ç—É'}\n"\
               f"üçÄ –ú–µ—Ç–∫–∞ –§–æ—Ä—Ç—É–Ω—ã: {fortuna if fortuna > 0 else '–ù–µ—Ç—É'}\n\n"\
               f"üü° –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: \n{achievement_text}"
    bot.reply_to(message, response)

@bot.message_handler(commands=['localtop'])
@safe_command
def show_stats(message):
    group_id = message.chat.id
    create_table(group_id)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute(f"SELECT username, points FROM '{group_id}' ORDER BY points DESC")
    stats = cursor.fetchall()
    conn.close()

    if not stats:
        bot.reply_to(message, "üëø –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–ª!")
        return

    medals = ["ü•á", "ü•à", "ü•â"]
    response = "üèÜ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:\n\n"

    for idx, row in enumerate(stats):
        medal = medals[idx] if idx < 3 else f"{idx + 1}."
        response += f"{medal} @{row[0]} - {row[1]} –®–∫–æ–ª—å–Ω—ã—Ö\n"

    bot.reply_to(message, response)


@bot.message_handler(commands=['top'])
@safe_command
def global_top(message):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()

    users = {}
    for table in tables:
        table_name = table[0]
        cursor.execute(f"SELECT user_id, username, points FROM '{table_name}'")
        for user_id, username, points in cursor.fetchall():
            if user_id not in users or users[user_id][1] < points:
                users[user_id] = (username, points)

    # Exclude user with ID 6837339007
    users = {k: v for k, v in users.items() if k != 6837339007}

    sorted_users = sorted(users.items(), key=lambda x: x[1][1], reverse=True)

    medals = ["ü•á", "ü•à", "ü•â"]
    top_list = ""

    for i, (uid, (uname, pts)) in enumerate(sorted_users[:10]):
        prefix = medals[i] if i < 3 else f"{i + 1}."
        if uid == 5375127224:
            top_list += f"{prefix} @{uname} - ‚ôæÔ∏è —Ä–∞–±–æ–≤\n"
        else:
            top_list += f"{prefix} @{uname} - {pts} —Ä–∞–±–æ–≤\n"

    conn.close()
    response = "üèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:\n\n" + (top_list if top_list else "ü§¨ –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç.")
    bot.reply_to(message, response)


@bot.message_handler(commands=['help'])
@safe_command
def help_command(message):
    bot.reply_to(message,
                 "üè° –ü—Ä–æ–∫–∞—á–∞—Ç—å —Ñ–µ—Ä–º—É –®–∫–æ–ª—å–Ω—ã—Ö - /play.\nüßê –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É - /statistic.\nüèÜ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø —Ñ–µ—Ä–º–µ—Ä–æ–≤ - /top.\n"
                 "üìñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /commands.\n"
                 "‚öîÔ∏è –ë—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É - /battlez @username.\n"
                 "‚¨ÜÔ∏è –ü—Ä–æ–∫–∞—á–∞—Ç—å —É—Ä–æ–≤–Ω–∏ - /upgrade")


@bot.message_handler(commands=['events'])
@safe_command
def events_command(message):
    bot.reply_to(message, "üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö:\n"
                          "‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞!\n\n –ò–≥—Ä–æ–∫ –∫–æ—Ç–æ—Ä—ã–π –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é —Å–µ–∑–æ–Ω–∞ –Ω–∞–±–µ—Ä—ë—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ SPS - 84–≥—Ä–Ω –≤ –∑–≤—ë–∑–¥–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º")

@bot.message_handler(commands=['battlez'])
@safe_command
def battlez_command(message):
    try:
        _, target_username = message.text.split()
        if not target_username.startswith('@'):
            raise ValueError("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except ValueError:
        bot.reply_to(message, "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /battlez @username")
        return

    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    group_id = message.chat.id

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"SELECT user_id, points FROM '{group_id}' WHERE username = ?", (target_username[1:],))
    target_user = cursor.fetchone()

    if not target_user:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        conn.close()
        return

    target_user_id, target_points = target_user
    if target_points <= 0:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_username} –Ω–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å, —Ç–∞–∫ –∫–∞–∫ —É –Ω–µ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤.")
        conn.close()
        return

    if user_id == 6113547946:
        handle_battle(user_id, target_user_id, group_id, auto_accept=True)
    else:
        markup = InlineKeyboardMarkup()
        accept_button = InlineKeyboardButton("‚úÖ",
                                             callback_data=f"accept_battle|{user_id}|{target_user_id}|{group_id}")
        markup.add(accept_button)
        sent_message = bot.reply_to(message, f"‚öîÔ∏è @{username} –±—Ä–æ—Å–∏–ª –≤—ã–∑–æ–≤ {target_username}", reply_markup=markup)
    conn.close()

@safe_command
def handle_battle_callback(call):
    if not call.data.startswith("accept_battle"):
        return

    _, challenger_id, target_id, group_id = call.data.split('|')
    challenger_id = int(challenger_id)
    target_id = int(target_id)
    group_id = int(group_id)

    if call.from_user.id != target_id:
        bot.answer_callback_query(call.id, "‚ùå–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤.")
        return

    handle_battle(challenger_id, target_id, group_id, call=call)
    
@safe_command
def handle_battle(challenger_id, target_id, group_id, call=None, auto_accept=False):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()

    cursor.execute(f"SELECT points FROM '{group_id}' WHERE user_id = ?", (challenger_id,))
    challenger_points = cursor.fetchone()[0]

    cursor.execute(f"SELECT points FROM '{group_id}' WHERE user_id = ?", (target_id,))
    target_points = cursor.fetchone()[0]

    if challenger_id == 1766101476:
        win_chance = 0.5
        max_points = 25
    else:
        win_chance = 0.5
        max_points = 25

    if random.random() < win_chance:
        delta = random.randint(1, max_points)
        winner_id, loser_id, points = challenger_id, target_id, delta
    else:
        delta = random.randint(1, max_points)
        winner_id, loser_id, points = target_id, challenger_id, delta

    cursor.execute(f"UPDATE '{group_id}' SET points = points + ? WHERE user_id = ?", (points, winner_id))
    cursor.execute(f"UPDATE '{group_id}' SET points = points - ? WHERE user_id = ?", (points, loser_id))
    conn.commit()

    cursor.execute(f"SELECT username, points FROM '{group_id}' WHERE user_id = ?", (winner_id,))
    winner_username, winner_points = cursor.fetchone()

    cursor.execute(f"SELECT username, points FROM '{group_id}' WHERE user_id = ?", (loser_id,))
    loser_username, loser_points = cursor.fetchone()

    conn.close()

    if call:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"‚öîÔ∏è –ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! @{winner_username} –ø–æ–±–µ–¥–∏–ª @{loser_username} –∏ –ø–æ–ª—É—á–∏–ª {points} –æ—á–∫–æ–≤.\n\n"
                                   f"üë®üèø‚Äçü¶≤ –ë–∞–ª–∞–Ω—Å @{winner_username}: {winner_points} –®–∫–æ–ª—å–Ω—ã—Ö.\n"
                                   f"üë®üèø‚Äçü¶≤ –ë–∞–ª–∞–Ω—Å @{loser_username}: {loser_points} –®–∫–æ–ª—å–Ω—ã—Ö.")
    else:
        bot.send_message(group_id,
                         text=f"‚öîÔ∏è –ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! @{winner_username} –ø–æ–±–µ–¥–∏–ª @{loser_username} –∏ –ø–æ–ª—É—á–∏–ª {points} –æ—á–∫–æ–≤.\n\n"
                              f"üë®üèø‚Äçü¶≤ –ë–∞–ª–∞–Ω—Å @{winner_username}: {winner_points} –®–∫–æ–ª—å–Ω—ã—Ö.\n"
                              f"üë®üèø‚Äçü¶≤ –ë–∞–ª–∞–Ω—Å @{loser_username}: {loser_points} –®–∫–æ–ª—å–Ω—ã—Ö.")


@bot.message_handler(commands=['upgradeinfo'])
@safe_command
def help_command(message):
    bot.reply_to(message,
                 "üíµ\n\n–ü—Ä–æ–∫–∞—á–∫–∞ —Ä–∞–±–æ–≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–∞—ë—Ç –≤–∞–º +15% —à–∞–Ω—Å–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ–≤ –Ω–∞ —Å–≤–æ—é —Ñ–µ—Ä–º—É –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 10 + –æ—á–∫–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ñ–µ—Ä–º—ã. –ú–∞–∫—Å–∏–º—É–º: 5.\n\n–ü—Ä–æ–∫–∞—á–∫–∞ —Ñ–µ—Ä–º—ã –ø–æ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–±–æ–≤ –∑–∞ 1 –∏–≥—Ä—É –Ω–∞ 5 –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å.\n\n–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∞–º–ø–∏—Ä–∏–∑–º –¥–∞—ë—Ç 25% —à–∞–Ω—Å –≤—ã–∫–∞—á–∞—Ç—å –∏–∑ —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω–æ –æ—Ç 1 –æ—á–∫–æ–≤ + ? –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ —É—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã +3.75% –±–∞–ª–∞–Ω—Å–∞ –∂–µ—Ä—Ç–≤—ã, —à–∞–Ω—Å 15% –Ω–∞ –∫—Ä–∏—Ç - 10% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ –∂–µ—Ä—Ç–≤—ã. –ú–∞–∫—Å–∏–º—É–º: 5\n\n–ß–∞—Å—ã –∫—Ä–æ–Ω–æ—Å–∞ —Å–Ω–∏–∂–∞—é—Ç –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ /play –Ω–∞ 38%\n\n")

@bot.message_handler(commands=['superskills'])
@safe_command
def help_command(message):
    bot.reply_to(message,
                 f"üíµ\n\n–ú–µ—Ç–∫–∞ –§–æ—Ä—Ç—É–Ω—ã:\n–ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: –ø–æ–≤—ã—à–∞–µ—Ç —à–∞–Ω—Å –Ω–∞ –¥–∂–µ–∫–ø–æ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (–ú–∞–∫—Å–∏–º—É–º –¥–æ 18%),  ")

@bot.message_handler(commands=['upgrade'])
@safe_command
@safe_callback
def upgrade_command(message):
    user_id = message.from_user.id
    group_id = message.chat.id
    create_table(group_id)

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        f"SELECT points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price FROM '{group_id}' WHERE user_id = ?",
        (user_id,))
    points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price = cursor.fetchone()

    farmprice = calculate_farm_price(farm_level, character_level)

    # === –ö–Ω–æ–ø–∫–∏ ===
    markup = InlineKeyboardMarkup()
    level_button = InlineKeyboardButton(f"üë®üèø‚Äçü¶≤ - {clprice}", callback_data=f"upgrade_character|{user_id}|{group_id}")
    farm_button = InlineKeyboardButton(f"üè° - {farmprice}", callback_data=f"upgrade_farm|{user_id}|{group_id}")
    vamp_button = InlineKeyboardButton(f"üßõüèª‚Äç‚ôÄÔ∏è - {vamprice}", callback_data=f"upgrade_vampirism|{user_id}|{group_id}")
    chronos_button = InlineKeyboardButton(f"‚è≥ - 330", callback_data=f"buy_chronos|{user_id}|{group_id}")
    fortuna_love = InlineKeyboardButton(f"üçÄ - {fortuna_price}", callback_data=f"upgrade_fortuna|{user_id}|{group_id}")
    markup.add(level_button, farm_button, vamp_button, chronos_button, fortuna_love)

    bot.reply_to(message, f"üü¢ –í–∞—à–∏ –æ—á–∫–∏: {points}\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å:", reply_markup=markup)

@safe_callback
def handle_upgrade_callback(call):
    if call.data.startswith("upgrade_character"):
        _, user_id, group_id = call.data.split('|')
        user_id = int(user_id)
        group_id = int(group_id)

        if call.from_user.id != user_id:
            bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞")
            return

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            f"SELECT points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price FROM '{group_id}' WHERE user_id = ?",
            (user_id,))
        points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price = cursor.fetchone()

        if points >= clprice and character_level < 6:
            if character_level == 5:
                clprice = 1500
            elif character_level < 5:
                points -= clprice
                character_level += 1
                clprice = int(clprice * 1.25)
            cursor.execute(f"UPDATE '{group_id}' SET points = ?, character_level = ?, clprice = ? WHERE user_id = ?",
                           (points, character_level, clprice, user_id))
            conn.commit()
            bot.answer_callback_query(call.id, f"üë®üèø‚Äçü¶≤ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ–≤—ã—à–µ–Ω –¥–æ {character_level}!")
        else:
            bot.answer_callback_query(call.id,
                                      "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")

        markup = InlineKeyboardMarkup()
        level_button = InlineKeyboardButton(f"üë®üèø‚Äçü¶≤ - {clprice}",callback_data=f"upgrade_character|{user_id}|{group_id}")
        farm_button = InlineKeyboardButton(f"üè° - {farmprice}", callback_data=f"upgrade_farm|{user_id}|{group_id}")
        vamp_button = InlineKeyboardButton(f"üßõüèª‚Äç‚ôÄÔ∏è - {vamprice}", callback_data=f"upgrade_vampirism|{user_id}|{group_id}")
        chronos_button = InlineKeyboardButton(f"‚è≥ - 330", callback_data=f"buy_chronos|{user_id}|{group_id}")
        fortuna_love = InlineKeyboardButton(f"üçÄ - {fortuna_price}", callback_data=f"upgrade_fortuna|{user_id}|{group_id}")
        markup.add(level_button, farm_button, vamp_button, chronos_button, fortuna_love)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üü¢ –í–∞—à–∏ –æ—á–∫–∏: {points}\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å:",
            reply_markup=markup
        )
        conn.close()

    elif call.data.startswith("upgrade_farm"):
        _, user_id, group_id = call.data.split('|')
        user_id = int(user_id)
        group_id = int(group_id)

        if call.from_user.id != user_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞", show_alert=True)
            return

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            f"SELECT points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price FROM '{group_id}' WHERE user_id = ?",
            (user_id,))
        points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price = cursor.fetchone()

        new_farmprice = calculate_farm_price(farm_level, character_level)

        if points >= new_farmprice:
            points -= new_farmprice
            farm_level += 1
            farmprice = new_farmprice
            cursor.execute(f"UPDATE '{group_id}' SET points = ?, farm_level = ?, farmprice = ? WHERE user_id = ?",
                           (points, farm_level, farmprice, user_id))
            conn.commit()
            bot.answer_callback_query(call.id, f"üè° –§–µ—Ä–º–∞ —É–ª—É—á—à–µ–Ω–∞ –¥–æ —É—Ä–æ–≤–Ω—è {farm_level}!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ñ–µ—Ä–º—ã.")

        markup = InlineKeyboardMarkup()
        level_button = InlineKeyboardButton(f"üë®üèø‚Äçü¶≤ - {clprice}",callback_data=f"upgrade_character|{user_id}|{group_id}")
        farm_button = InlineKeyboardButton(f"üè° - {farmprice}", callback_data=f"upgrade_farm|{user_id}|{group_id}")
        vamp_button = InlineKeyboardButton(f"üßõüèª‚Äç‚ôÄÔ∏è - {vamprice}",callback_data=f"upgrade_vampirism|{user_id}|{group_id}")
        chronos_button = InlineKeyboardButton(f"‚è≥ - 330", callback_data=f"buy_chronos|{user_id}|{group_id}")
        fortuna_love = InlineKeyboardButton(f"üçÄ - {fortuna_price}",callback_data=f"upgrade_fortuna|{user_id}|{group_id}")
        markup.add(level_button, farm_button, vamp_button, chronos_button, fortuna_love)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üü¢ –í–∞—à–∏ –æ—á–∫–∏: {points}\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å:",
            reply_markup=markup
        )
        conn.close()

    elif call.data.startswith("upgrade_vampirism"):
        _, user_id, group_id = call.data.split('|')
        user_id = int(user_id)
        group_id = int(group_id)

        if call.from_user.id != user_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞", show_alert=True)
            return

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            f"SELECT points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price FROM '{group_id}' WHERE user_id = ?",
            (user_id,))
        points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price = cursor.fetchone()

        if points >= vamprice and vampirism < 6:
                if vampirism < 5:
                    points -= vamprice
                    vampirism += 1
                    vamprice = int(vamprice * 1.825)
                    vamprice += 5*(farm_level - 1)
                elif vampirism == 5:
                    points -= vamprice
                    vampirism += 1
                    vamprice = 3000
                    vamprice += 7*(farm_level - 1)

                    cursor.execute(f"UPDATE '{group_id}' SET points = ?, vampirism = ?, vamprice = ? WHERE user_id = ?",
                                   (points, vampirism, vamprice, user_id))
                    conn.commit()
                    bot.answer_callback_query(call.id, f"‚úÖ –í–∞–º–ø–∏—Ä–∏–∑–º –ø—Ä–æ–∫–∞—á–∞–Ω –¥–æ {vampirism}!")

                else:
                    bot.answer_callback_query(call.id,
                                              "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –≤–∞–º–ø–∏—Ä–∏–∑–º–∞ –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")

                markup = InlineKeyboardMarkup()
                level_button = InlineKeyboardButton(f"üë®üèø‚Äçü¶≤ - {clprice}",callback_data=f"upgrade_character|{user_id}|{group_id}")
                farm_button = InlineKeyboardButton(f"üè° - {farmprice}", callback_data=f"upgrade_farm|{user_id}|{group_id}")
                vamp_button = InlineKeyboardButton(f"üßõüèª‚Äç‚ôÄÔ∏è - {vamprice}",callback_data=f"upgrade_vampirism|{user_id}|{group_id}")
                chronos_button = InlineKeyboardButton(f"‚è≥ - 330", callback_data=f"buy_chronos|{user_id}|{group_id}")
                fortuna_love = InlineKeyboardButton(f"üçÄ - {fortuna_price}",callback_data=f"upgrade_fortuna|{user_id}|{group_id}")
                markup.add(level_button, farm_button, vamp_button, chronos_button, fortuna_love)

                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"üü¢ –í–∞—à–∏ –æ—á–∫–∏: {points}\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å:",
                    reply_markup=markup
                )
        conn.close()

    elif call.data.startswith("buy_chronos"):
        _, user_id, group_id = call.data.split('|')
        user_id = int(user_id)
        group_id = int(group_id)

        if call.from_user.id != user_id:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞", show_alert=True)
            return

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            f"SELECT points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price FROM '{group_id}' WHERE user_id = ?",
            (user_id,))
        points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price = cursor.fetchone()

        if points >= 330 and not chronos:
            points -= 330
            chronos = 1
            cursor.execute(f"UPDATE '{group_id}' SET points = ?, chronos = ? WHERE user_id = ?",
                           (points, chronos, user_id))
            conn.commit()
            bot.answer_callback_query(call.id, "‚úÖ –ß–∞—Å—ã –ö—Ä–æ–Ω–æ—Å–∞ –∫—É–ø–ª–µ–Ω—ã!")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Chronos –∏–ª–∏ –æ–Ω —É–∂–µ –∫—É–ø–ª–µ–Ω.")

        markup = InlineKeyboardMarkup()
        level_button = InlineKeyboardButton(f"üë®üèø‚Äçü¶≤ - {clprice}", callback_data=f"upgrade_character|{user_id}|{group_id}")
        farm_button = InlineKeyboardButton(f"üè° - {farmprice}", callback_data=f"upgrade_farm|{user_id}|{group_id}")
        vamp_button = InlineKeyboardButton(f"üßõüèª‚Äç‚ôÄÔ∏è - {vamprice}",callback_data=f"upgrade_vampirism|{user_id}|{group_id}")
        chronos_button = InlineKeyboardButton(f"‚è≥ - 330", callback_data=f"buy_chronos|{user_id}|{group_id}")
        fortuna_love = InlineKeyboardButton(f"üçÄ - {fortuna_price}",callback_data=f"upgrade_fortuna|{user_id}|{group_id}")
        markup.add(level_button, farm_button, vamp_button, chronos_button, fortuna_love)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üü¢ –í–∞—à–∏ –æ—á–∫–∏: {points}\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å:",
            reply_markup=markup
        )
        conn.close()

    elif call.data.startswith("upgrade_fortuna"):
            _, user_id, group_id = call.data.split('|')
            user_id = int(user_id)
            group_id = int(group_id)

            if call.from_user.id != user_id:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞", show_alert=True)
                return

            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            cursor.execute(
                f"SELECT points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price FROM '{group_id}' WHERE user_id = ?",
                (user_id,))
            points, character_level, clprice, farm_level, farmprice, vampirism, vamprice, chronos, fortuna, fortuna_price = cursor.fetchone()
            
            if points > fortuna_price and fortuna < 3:
                if fortuna == 0:
                    points -= fortuna_price
                    fortuna += 1
                    fortuna_price = 3300
                elif fortuna == 1:
                    points -= fortuna_price
                    fortuna += 1
                    fortuna_price = 7000
                    fortuna_price += 23*(farm_level-1)
                    
                cursor.execute(f"UPDATE '{group_id}' SET points = ?, fortuna = ?, fortuna_price = ? WHERE user_id = ?",
                           (points, fortuna, fortuna_price, user_id))
                conn.commit()
                bot.answer_callback_query(call.id, f"‚úÖ –ú–µ—Ç–∫–∞ —Ñ–æ—Ä—Ç—É–Ω—ã –ø—Ä–æ–∫–∞—á–∞–Ω–∞ –¥–æ {fortuna}!")
            else:
                bot.answer_callback_query(call.id,
                                          "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è –§–æ—Ä—Ç—É–Ω—ã –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.")
            markup = InlineKeyboardMarkup()
            level_button = InlineKeyboardButton(f"üë®üèø‚Äçü¶≤ - {clprice}",
                                                callback_data=f"upgrade_character|{user_id}|{group_id}")
            farm_button = InlineKeyboardButton(f"üè° - {farmprice}", callback_data=f"upgrade_farm|{user_id}|{group_id}")
            vamp_button = InlineKeyboardButton(f"üßõüèª‚Äç‚ôÄÔ∏è - {vamprice}",
                                               callback_data=f"upgrade_vampirism|{user_id}|{group_id}")
            chronos_button = InlineKeyboardButton(f"‚è≥ - 330", callback_data=f"buy_chronos|{user_id}|{group_id}")
            fortuna_love = InlineKeyboardButton(f"üçÄ - {fortuna_price}",
                                                callback_data=f"upgrade_fortuna|{user_id}|{group_id}")
            markup.add(level_button, farm_button, vamp_button, chronos_button, fortuna_love)

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"üü¢ –í–∞—à–∏ –æ—á–∫–∏: {points}\n‚ùì –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å:",
                reply_markup=markup
            )

            conn.close()

bot.register_callback_query_handler(handle_upgrade_callback, func=lambda call: call.data.startswith(("upgrade", "buy_chronos")))
bot.register_callback_query_handler(handle_battle_callback, func=lambda call: call.data.startswith("accept_battle"))

bot.polling(none_stop=True)
