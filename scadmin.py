# -*- coding: utf-8 -*-

import sqlite3
import telebot
import time

def get_resource(section: str, line_index: int = None, path: str = "resources.txt") -> str | list[str]:
    section = section.strip().upper()
    start_marker = f"==== {section} ===="
    with open(path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    inside_section = False
    section_lines = []

    for line in lines:
        line = line.strip()
        if not line:
            continue
        if line.startswith("====") and section in line:
            inside_section = True
            continue
        elif line.startswith("====") and inside_section:
            break
        elif inside_section:
            section_lines.append(line)

    if not section_lines:
        raise ValueError(f"–†–∞–∑–¥–µ–ª '{section}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –≤ {path}")

    if line_index is not None:
        if line_index >= len(section_lines):
            raise IndexError(f"–í —Ä–∞–∑–¥–µ–ª–µ '{section}' –Ω–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω–¥–µ–∫—Å–æ–º {line_index}")
        return section_lines[line_index]

ADMIN_ID = 1766101476
TOKEN = get_resource("TOKENS", 1)
DB_PATH = get_resource("PATHS", 0)
ADMINS_DB_PATH = get_resource("PATHS", 1)
BANNED_USERS_DB_PATH= get_resource("PATHS", 2)

bot = telebot.TeleBot(TOKEN)

def init_admins_db():
    conn = sqlite3.connect(ADMINS_DB_PATH)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS admins (
            user_id INTEGER PRIMARY KEY,
            username TEXT
        )
    """)
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("INSERT OR IGNORE INTO admins (user_id, username) VALUES (?, ?)", (ADMIN_ID, ""))
    conn.commit()
    conn.close()

init_admins_db()

def create_table(group_id):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"""
        CREATE TABLE IF NOT EXISTS '{group_id}' (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            points INTEGER DEFAULT 0,
            last_play INTEGER DEFAULT 0,
            character_level INTEGER DEFAULT 1,
            farm_level INTEGER DEFAULT 1,
            vampirism INTEGER DEFAULT 0,
            clprice INTEGER DEFAULT 70,
            farmprice INTEGER DEFAULT 120,
            vamprice INTEGER DEFAULT 100,
            chronos BOOLEAN DEFAULT 0,
            ares BOOLEAN DEFAULT 0,
            fortuna INTEGER DEFAULT 0,
            fortuna_price INTEGER DEFAULT 1500,
            rebirth_level INTEGER DEFAULT 1
        )
    """)
    conn.commit()
    conn.close()

def get_time_word(value: int, word_type: str) -> str:
    forms = {
        '—Å–µ–∫—É–Ω–¥–∞': ('—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥'),
        '–º–∏–Ω—É—Ç–∞': ('–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç'),
        '—á–∞—Å': ('—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'),
    }

    if word_type not in forms:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π: '—Å–µ–∫—É–Ω–¥–∞', '–º–∏–Ω—É—Ç–∞', '—á–∞—Å'.")

    n = abs(value)
    last_two = n % 100
    last_digit = n % 10

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
    if 11 <= last_two <= 14:
        form = forms[word_type][2]
    elif last_digit == 1:
        form = forms[word_type][0]
    elif 2 <= last_digit <= 4:
        form = forms[word_type][1]
    else:
        form = forms[word_type][2]

    return f"{value} {form}"

user_locks = {}

def check_admin(user_id):
    global user_locks

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    if user_locks.get(user_id):
        return False  # –Ω–µ –¥–∞—ë–º –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤

    # –ë–ª–æ–∫–∏—Ä—É–µ–º
    user_locks[user_id] = True

    try:
        conn = sqlite3.connect(ADMINS_DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM admins WHERE user_id = ?", (user_id,))
        result = cursor.fetchone()
        conn.close()

        return result is not None or user_id == ADMIN_ID or user_id == 1781529906 or user_id == 5375127224 or user_id == 1178628743

    finally:
        # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        user_locks.pop(user_id, None)

def load_rebirth_data(file_path="/home/bitnami/schoolar/rebirth_data.txt"):
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.read().splitlines()

    multiplier_section = []
    price_section = []

    current_section = None
    for line in lines:
        if line.strip() == "====multiplier====":
            current_section = "multiplier"
            continue
        elif line.strip() == "====prices====":
            current_section = "prices"
            continue

        if current_section == "multiplier" and line.strip():
            multiplier_section.append(float(line.strip()))
        elif current_section == "prices" and line.strip():
            price_section.append(int(line.strip()))

    return multiplier_section, price_section


def get_rebirth_multiplier(rebirth_level, file_path="/home/bitnami/schoolar/rebirth_data.txt"):
    multipliers, _ = load_rebirth_data(file_path)
    index = max(0, rebirth_level - 1)  # —á—Ç–æ–±—ã –ø—Ä–∏ rebirth_level = 1 –±—Ä–∞—Ç—å –∏–Ω–¥–µ–∫—Å 0
    if index < len(multipliers):
        return multipliers[index]
    return 1.0


def get_rebirth_price(rebirth_level, file_path="/home/bitnami/schoolar/rebirth_data.txt"):
    _, prices = load_rebirth_data(file_path)
    index = rebirth_level - 1  # —Ü–µ–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–±–∏—Ç—Ö–∞
    if 0 <= index < len(prices):
        return prices[index]
    return None

def get_rebirth_names(rebirth_level):
    name = "–ö–æ—Å—Ç—ã–ª—å"
    if rebirth_level == 2:
        name = "–°—ç–Ω–∫—É –ò—Å–∏–≥–∞–º–∏"
    elif rebirth_level == 3:
        name = "–¢–æ–¥–∑–∏ –§—É—Å–∏–≥—É—Ä–æ"
    elif rebirth_level == 4:
        name = "–†–µ–π—Ö–∞—Ä–¥—Ç –í–∞–Ω –ê—Å—Ç—Ä–µ—è"
    elif rebirth_level == 5:
        name = "–ß—ë—Ä–Ω—ã–π –ú–µ—á–Ω–∏–∫"
    elif rebirth_level == 6:
        name = "–õ—É—Ñ–∞—Å—É –ú–∞—Ñ–∞–∞–ª—É"
    elif rebirth_level == 7:
        name = "–í–∞–Ω –õ–∏–Ω"
    elif rebirth_level == 7:
        name = "–†–∏–º—É—Ä—É –¢–µ–º–ø–µ—Å—Ç"
    elif rebirth_level == 8:
        name = "–ê–Ω–æ—Å –í–æ–ª—å–¥–∏–≥–æ–∞–¥"
    elif rebirth_level == 9:
        name = "–ï–≤–∞"
    elif rebirth_level == 10:
        name = "–ô–æ–≥–∏—Ä–∏ –¢–∞–∫–∞—Ç–æ"
    elif rebirth_level == 11:
        name = "–§–µ–∑–∞—Ä–∏–Ω"
    elif rebirth_level == 12:
        name = "Cat"
    elif rebirth_level == 13:
        name = "–ê–Ω–∞—Ñ–∞–±–∞—É–ª–∞"
    elif rebirth_level == 14:
        name = "–ê–ª—ã–π –∫–æ—Ä–æ–ª—å"
    elif rebirth_level == 15:
        name = "SCP 303 GOD"
    elif rebirth_level == 16:
        name = "Azatoth"
    elif rebirth_level == 17:
        name = "Writer"
    elif rebirth_level == 18:
        name = "SCP 3018"
    elif rebirth_level == 19:
        name = "ABSS"
    elif rebirth_level == 20:
        name = "I AM THAT I AM"
    elif rebirth_level > 20:
        name = "I AM THAT I AM"
    else:
        name = "–ö–æ—Å—Ç—ã–ª—å"
    return name

@bot.message_handler(commands=['support'])
def handle_support(message):
    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_msg = message.text[len('/support'):].strip()
    
    if not user_msg:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /support.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
    support_text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username or '–±–µ–∑ username'} (ID: {message.from_user.id}):\n\n{user_msg}"
    bot.send_message(ADMIN_ID, support_text)
    bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–ø–∞—Å–∏–±–æ!")

@bot.message_handler(commands=['admin'])
def admin_command(message):
    if not message.from_user.id == ADMIN_ID:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, identifier = message.text.split()
    except ValueError:
        bot.reply_to(message, "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin id/username")
        return

    conn = sqlite3.connect(ADMINS_DB_PATH)
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ identifier —á–∏—Å–ª–æ–º (ID)
    if identifier.isdigit():
        user_id = int(identifier)
        cursor.execute("INSERT OR IGNORE INTO admins (user_id, username) VALUES (?, ?)", (user_id, ""))
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
    else:
        # –£–¥–∞–ª—è–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        username = identifier[1:] if identifier.startswith('@') else identifier
        cursor.execute("INSERT OR IGNORE INTO admins (user_id, username) VALUES (NULL, ?)", (username,))
        bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")

    conn.commit()
    conn.close()

@bot.message_handler(commands=['admins'])
def admin_list(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    bot.reply_to(message, f"üõ°Ô∏è –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n\n"
                               f"üëë @Thermobyte - Owner:\n\t–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: o5.\n\t–†–æ–ª—å: —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫\n\t–°—Ä–æ–∫: –ù–∞–≤—Å–µ–≥–¥–∞\n"
                               f"‚öúÔ∏è @lllapas - Heiress:\n\t–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: o4\n\t–†–æ–ª—å: –Ω–∞—Å–ª–µ–¥–Ω–∏–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞\n\t–°—Ä–æ–∫: –ù–∞–≤—Å–µ–≥–¥–∞\n"
                               f"ü§ñ @AC_EvelineBot - Admin-bot.\n\t–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: o3.5\n\t–†–æ–ª—å: –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\t–°—Ä–æ–∫: –ù–∞–≤—Å–µ–≥–¥–∞")

@bot.message_handler(commands=['limit'])
def ban_user(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, target_username, ban_time = message.text.split()
        if not target_username.startswith('@'):
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        ban_time = int(ban_time)
    except ValueError:
        bot.reply_to(message, "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban @username time (–º–∏–Ω—É—Ç—ã)")
        return

    group_id = message.chat.id

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"SELECT user_id FROM '{group_id}' WHERE username = ?", (target_username[1:],))
    target_user_id = cursor.fetchone()
    
    if not target_user_id:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        conn.close()
        return

    target_user_id = target_user_id[0]
    ban_until = int(time.time()) + (ban_time * 60)
    cursor.execute(f"UPDATE '{group_id}' SET last_play = ? WHERE user_id = ?", (ban_until, target_user_id))
    conn.commit()
    conn.close()
    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ {ban_time} –º–∏–Ω—É—Ç.")

@bot.message_handler(commands=['reset'])
def reset_data(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, subcommand, target_username = message.text.split()
        if not target_username.startswith('@'):
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except ValueError:
        bot.reply_to(message, "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset time/stats @username")
        return

    group_id = message.chat.id

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"SELECT user_id FROM '{group_id}' WHERE username = ?", (target_username[1:],))
    target_user_id = cursor.fetchone()
    
    if not target_user_id:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        conn.close()
        return

    target_user_id = target_user_id[0]

    if subcommand == 'time':
        cursor.execute(f"UPDATE '{group_id}' SET last_play = 0 WHERE user_id = ?", (target_user_id,))
        bot.reply_to(message, f"‚úÖ –í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞—Ä—è–¥–∫–∏ –¥–ª—è {target_username} —Å–±—Ä–æ—à–µ–Ω–æ.")
    elif subcommand == 'stats':
        cursor.execute(f"UPDATE '{group_id}' SET points = 0, last_play = 0, character_level = 1, farm_level = 1, vampirism = 0, clprice = 70, farmprice = 120, vamprice = 120, chronos = 0, ares = 0, fortuna = 0, fortuna_price = 1500, rebirth_level = 1 WHERE user_id = ?", (target_user_id,))
        bot.reply_to(message, f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {target_username} —Å–±—Ä–æ—à–µ–Ω–∞.")
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reset time/stats @username")
        return

    conn.commit()
    conn.close()

@bot.message_handler(commands=['add'])
def add_points(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, subcommand, target_username, points = message.text.split()
        if not target_username.startswith('@') or subcommand != 'points':
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
        points = int(points)
    except ValueError:
        bot.reply_to(message, "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add points @username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        return

    group_id = message.chat.id

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"SELECT user_id FROM '{group_id}' WHERE username = ?", (target_username[1:],))
    target_user_id = cursor.fetchone()
    
    if not target_user_id:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        conn.close()
        return

    target_user_id = target_user_id[0]
    cursor.execute(f"UPDATE '{group_id}' SET points = points + ? WHERE user_id = ?", (points, target_user_id))
    conn.commit()
    conn.close()
    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_username} –¥–æ–±–∞–≤–ª–µ–Ω–æ {points} –æ—á–∫–æ–≤.")

@bot.message_handler(commands=['set'])
def set_skill(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, subcommand, skill_name, level = message.text.split()
        level = int(level)
    except ValueError:
        bot.reply_to(message, "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set skill –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–µ–Ω—å")
        return

    group_id = message.chat.id
    skill_column = {
        'character': 'character_level',
        'farm': 'farm_level',
        'vampirism': 'vampirism',
        'ares': 'ares',
        'chronos': 'chronos',
        'fortuna': 'fortuna',
        'rebirth': 'rebirth_level'
    }.get(skill_name.lower())

    if not skill_column:
        bot.reply_to(message, "‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ character, farm, vampirism, ares –∏–ª–∏ chronos.")
        return

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"UPDATE '{group_id}' SET {skill_column} = ? WHERE user_id = ?", (level, message.from_user.id))
    conn.commit()
    conn.close()
    bot.reply_to(message, f"‚úÖ –£—Ä–æ–≤–µ–Ω—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ {skill_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {level}.")

@bot.message_handler(commands=['getdata'])
def user_info(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        _, target_username = message.text.split()
        if not target_username.startswith('@'):
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except ValueError:
        bot.reply_to(message, "‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /info @username")
        return

    group_id = message.chat.id

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM '{group_id}' WHERE username = ?", (target_username[1:],))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    rebirth_level = user_data[14]  # –ò–Ω–¥–µ–∫—Å 14 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç rebirth_level

    response = (f"üìú –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {target_username}:\n"
                f"üë®üèø‚Äçü¶≤ –û—á–∫–∏: {user_data[2]}\n"
                f"üïê –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã: {user_data[3]}\n"
                f"üßëüèª‚Äçüåæ –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {user_data[4]}\n"
                f"üè° –£—Ä–æ–≤–µ–Ω—å —Ñ–µ—Ä–º—ã: {user_data[5]}\n"
                f"üßõüèª‚Äç‚ôÄÔ∏è –í–∞–º–ø–∏—Ä–∏–∑–º: {user_data[6]}\n"
                f"üíµ –¶–µ–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {user_data[7]}\n"
                f"üíµ –¶–µ–Ω–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∞–º–ø–∏—Ä–∏–∑–º–∞: {user_data[9]}\n"
                f"‚åõÔ∏è –ß–∞—Å—ã –∫—Ä–æ–Ω–æ—Å–∞: {'–î–∞' if user_data[10] else '–ù–µ—Ç'}\n"
                f"‚ûñ –ú–∏–Ω—É—Å–æ—Ñ–æ–±–∏—è: {'–î–∞' if user_data[11] else '–ù–µ—Ç'}\n"
                f"üçÄ –ú–µ—Ç–∫–∞ –§–æ—Ä—Ç—É–Ω—ã: {user_data[12] if user_data[12]>0 else '–ù–µ—Ç'}\n"
                f"\nüü¢ –†–µ–±–∏—Ç—Ö: {rebirth_level} - üëë{get_rebirth_names(rebirth_level)}üëë. –ú–Ω–æ–∂–∏—Ç–µ–ª—å: x{get_rebirth_multiplier(rebirth_level)}")
    bot.reply_to(message, response)

@bot.message_handler(commands=['stop'])
def stop_bot(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    bot.reply_to(message, "‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    bot.stop_polling()

@bot.message_handler(commands=['permanent'])
def ban_user(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        banned_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /permanent <user_id>")
        return

    conn = sqlite3.connect(BANNED_USERS_DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO banned_users (user_id) VALUES (?)", (banned_id,))
    conn.commit()
    conn.close()

    bot.reply_to(message, f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {banned_id} –∑–∞–±–∞–Ω–µ–Ω.")

@bot.message_handler(commands=['pardon'])
def unban_user(message):
    if not check_admin(message.from_user.id):
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        unbanned_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        bot.reply_to(message, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <user_id>")
        return

    conn = sqlite3.connect(BANNED_USERS_DB_PATH)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (unbanned_id,))
    conn.commit()
    conn.close()

    bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unbanned_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.")

bot.polling(none_stop=True)
